#!/usr/bin/env node

var async = require('async');
var cloudfiles = require('cloudfiles');
var events = require('events');
var fs = require('fs');
var mkdirp = require('mkdirp');
var os = require('os');
var path = require('path');
var sprintf = require('sprintf').sprintf;
var sys = require('sys');
var logmagic = require('logmagic');
var log = require('logmagic').local('cassandra-syncer-new');

logmagic.route('__root__', logmagic.DEBUG, 'graylog2-stderr');

var arg = require('optimist')
    .usage('$0 ')
    .demand('bucket')
    .alias('b', 'bucket')
    .demand('path')
    .alias('p', 'path')
    .demand('config')
    .alias('c', 'config')
    .alias('h', 'help');
var argv = arg.argv;

function Restore(path, options) {
  this._options = options;
  if (!this._options.concurrency) {
    this._options.concurrency = 2;
  }
  this._path = path;
  this._cachePath = this._options.cache.cachePath;
  this._bucket = options.bucket || os.hostname();
  this._queue = async.queue(this._performDownload.bind(this), this._options.concurrency);
  this._client = cloudfiles.createClient(this._options);
}

Restore.prototype._performDownload = function(file, callback) {
  var newPath = path.join(this._path, file.name),
      dirPath = path.dirname(newPath),
      cachePath = path.dirname(path.join(this._cachePath, this._bucket, file.name));
      self = this;
  log.info(sprintf('Downloading file %s to %s', file.name, newPath));
  async.waterfall([
    function(callback) {
      mkdirp(path.dirname(newPath), callback);
    },
    function(result, callback) {
      mkdirp(cachePath, callback);
    },
    function(result, callback) {
      self._client.getFile(self._bucket, file.name, callback);
    },
    function(file, callback) {
      file.save({ local: newPath }, callback)
    }
  ], callback);
};

Restore.prototype.restore = function() {
  var self = this;
  async.waterfall([
    function auth(callback) {
      self._client.setAuth(function() {
        callback();
      });
    },
    function getFiles(callback) {
      self._client.getFiles(self._bucket, function(err, files) {
        if (err) {
          callback(err);
          return;
        }
        self._queue.push(files);
        callback();
      });
    }
  ]);
};

function main() {
  var config, options = {}, watcher;

  try {
    config = JSON.parse(fs.readFileSync(argv.config));
  } catch(err) {
    log.error(sprintf('invalid config : %s', err.message));
    process.exit(1);
  }

  options.auth = {};
  options.auth.username = config.RACKSPACE_USERNAME;
  options.auth.apiKey = config.RACKSPACE_TOKEN;
  if (config.USE_SERVICENET === true) {
    options.servicenet = true;
  }
  if (config.HOST) {
    options.auth.host = options.config.HOST;
  }
  if (config.CACHE_PATH) {
    options.cache = {};
    options.cache.cachePath = config.CACHE_PATH;
  }
  if (argv.b) {
    options.bucket = argv.b;
  }

  restore = new Restore(argv.path, options);
  restore.restore();
}

main();
